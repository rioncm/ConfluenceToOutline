"""
Regular expression patterns used throughout the Confluence processing system.

This module centralizes all regex patterns with clear documentation
for better maintainability and understanding.
"""
import re
from typing import Pattern


class ConfluencePatterns:
    """Regular expression patterns for Confluence HTML/Markdown processing."""
    
    # Breadcrumb and navigation patterns
    NUMBERED_LIST_PATTERN: Pattern[str] = re.compile(r'^\d+\.\s*\[([^\]]+)\]\(([^)]+)\)$')
    """Matches numbered list items like: 1. [Title](link.html)"""
    
    MULTILINE_START_PATTERN: Pattern[str] = re.compile(r'^\d+\.\s*\[([^\]]+)$')
    """Matches start of multi-line numbered list items like: 1. [Title"""
    
    MULTILINE_END_PATTERN: Pattern[str] = re.compile(r'^([^\]]*)\]\(([^)]+)\)$')
    """Matches end of multi-line numbered list items like: continued title](link.html)"""
    
    BREADCRUMB_SECTION_PATTERN: Pattern[str] = re.compile(
        r'^((?:\d+\.\s+\[.*?\](?:\([^)]+\)|\n\s+[^)]*\([^)]+\))\s*\n?)+)',
        re.MULTILINE | re.DOTALL
    )
    """Matches complete breadcrumb sections with multi-line link support"""
    
    # Title extraction patterns
    TITLE_SPAN_PATTERN: Pattern[str] = re.compile(
        r'#\s*<span[^>]*id="title-text"[^>]*>\s*([^<]+)\s*</span>'
    )
    """Matches title spans like: # <span id="title-text"> Title </span>"""
    
    TITLE_INFO_SYS_PATTERN: Pattern[str] = re.compile(
        r'#\s*<span[^>]*>\s*Information Systems\s*:\s*([^<]+)\s*</span>',
        re.IGNORECASE
    )
    """Matches Information Systems title pattern"""
    
    MARKDOWN_HEADER_PATTERN: Pattern[str] = re.compile(r'#\s+(.+?)(?:\s*{[^}]*})?$')
    """Matches markdown headers like: # Title {optional-attributes}"""
    
    INFO_SYS_PREFIX_PATTERN: Pattern[str] = re.compile(
        r'^Information\s+Systems\s*:\s*', 
        re.IGNORECASE
    )
    """Matches "Information Systems : " prefix for removal"""
    
    # Content cleaning patterns  
    CLEAN_HEADER_PATTERN: Pattern[str] = re.compile(r'^#\s+(.+)$')
    """Matches clean markdown headers from processed HTML"""
    
    EXCESSIVE_NEWLINES_PATTERN: Pattern[str] = re.compile(r'\n{3,}')
    """Matches 3 or more consecutive newlines"""
    
    EMPTY_LINKS_PATTERN: Pattern[str] = re.compile(r'\[\s*\]\([^)]*\)')
    """Matches empty links like: [](url)"""
    
    CONFLUENCE_FOOTER_PATTERN: Pattern[str] = re.compile(
        r'Document generated by Confluence on [^\n]*\n*',
        re.IGNORECASE
    )
    """Matches Confluence footer text with flexible date matching"""
    
    ATLASSIAN_LINK_PATTERN: Pattern[str] = re.compile(
        r'\[Atlassian\]\([^)]*\)\s*',
        re.IGNORECASE
    )
    """Matches Atlassian link references"""
    
    CREATED_BY_PATTERN: Pattern[str] = re.compile(
        r'Created by.*?(?=\n\n|\n#|\Z)',
        re.DOTALL
    )
    """Matches "Created by..." metadata blocks"""
    
    LAST_MODIFIED_PATTERN: Pattern[str] = re.compile(
        r'last modified by.*?on [^\n]*\n*',
        re.IGNORECASE
    )
    """Matches "last modified by..." metadata"""
    
    HEADER_SPACING_PATTERN: Pattern[str] = re.compile(r'\n(#{1,6}\s)')
    """Matches headers for proper spacing adjustment"""
    
    # Attachment patterns
    IMAGE_ATTACHMENT_PATTERN: Pattern[str] = re.compile(r'!\s*\[([^\]]*)\]\(([^)]+)\)')
    """Matches image attachments like: ![alt](path)"""
    
    FILE_ATTACHMENT_PATTERN: Pattern[str] = re.compile(
        r'\[([^\]]+)\]\(([^)]+\.(png|jpg|jpeg|gif|pdf|docx?|xlsx?|pptx?|txt|zip|rar))\)',
        re.IGNORECASE
    )
    """Matches file attachments with common extensions"""
    
    SRC_ATTRIBUTE_PATTERN: Pattern[str] = re.compile(r'src=["\']([^"\']+)["\']')
    """Matches src attributes in HTML tags"""
    
    # Page ID extraction patterns
    PAGE_ID_PATTERN: Pattern[str] = re.compile(r'_(\d+)\.(html?|md)$')
    """Matches page IDs in filenames like: Title_2481520646.html"""
    
    # File naming patterns
    FILENAME_CLEANUP_PATTERN: Pattern[str] = re.compile(r'[^a-zA-Z0-9\-_]')
    """Matches characters to remove for safe filenames"""


class HTMLCleaningPatterns:
    """Patterns specifically for HTML cleaning and processing."""
    
    HTML_DOCTYPE_PATTERN: Pattern[str] = re.compile(
        r'<!DOCTYPE html|<html|<head|<body',
        re.IGNORECASE
    )
    """Detects HTML content vs markdown"""
    
    CONFLUENCE_CLASS_PATTERN: Pattern[str] = re.compile(
        r'legacy-color-text|author|editor|ng-scope'
    )
    """Matches Confluence-specific CSS classes to remove"""
    
    ATLASSIAN_HREF_PATTERN: Pattern[str] = re.compile(
        r'atlassian\.com',
        re.IGNORECASE
    )
    """Matches Atlassian domain links to remove"""


def compile_patterns():
    """
    Pre-compile all patterns for better performance.
    This function can be called at module import to ensure patterns are ready.
    """
    # All patterns are already compiled using re.compile() in their definitions
    pass


# Auto-compile patterns when module is imported
compile_patterns()


def test_patterns():
    """Test function to validate pattern functionality."""
    # Test cases for key patterns
    test_cases = [
        (ConfluencePatterns.NUMBERED_LIST_PATTERN, "1. [Title](link.html)", True),
        (ConfluencePatterns.PAGE_ID_PATTERN, "Title_2481520646.html", True),
        (ConfluencePatterns.INFO_SYS_PREFIX_PATTERN, "Information Systems : Title", True),
        (HTMLCleaningPatterns.HTML_DOCTYPE_PATTERN, "<!DOCTYPE html>", True),
    ]
    
    for pattern, test_string, should_match in test_cases:
        match = pattern.search(test_string)
        if bool(match) != should_match:
            print(f"Pattern test failed: {pattern.pattern} on '{test_string}'")
            return False
    
    print("All pattern tests passed!")
    return True


if __name__ == "__main__":
    test_patterns()